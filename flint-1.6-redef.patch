--- ./QS/mpQS.c.orig	2010-12-23 20:45:11.000000000 -0700
+++ ./QS/mpQS.c	2011-07-18 15:21:13.948375904 -0600
@@ -75,8 +75,7 @@
    mpz_set_ui(X, 1);
    mpz_set_ui(Y, 1);
    
-   unsigned long i;
-   for (i = 0; i < ncols; i++)
+   for (unsigned long i = 0; i < ncols; i++)
    {
       if (get_null_entry(nullrows, i, l)) 
       {
@@ -93,8 +92,7 @@
    }
    mpz_mod(Y, Y, N);
    
-   unsigned long i;
-   for (i = 0; i < num_primes; i++)
+   for (unsigned long i = 0; i < num_primes; i++)
    {
       if (prime_count[i]) 
       {
@@ -107,8 +105,7 @@
    mpz_mod(X, X, N);
    
 #if TEST
-   unsigned long i;
-   for (i = 0; i < num_primes; i++)
+   for (unsigned long i = 0; i < num_primes; i++)
    {
       if ((prime_count[i] %2) != 0) printf("Error %ld, %ld, %ld\n", l, i, prime_count[i]);
    }
--- ./QS/mp_sieve.c.orig	2010-12-23 20:45:11.000000000 -0700
+++ ./QS/mp_sieve.c	2011-07-18 15:20:30.950375902 -0600
@@ -84,7 +84,7 @@
    const unsigned long second_prime = FLINT_MIN(SECOND_PRIME, num_primes);
    
    unsigned long prime;
-   for (prime = small_primes; prime < second_prime; prime++) 
+   for (unsigned long prime = small_primes; prime < second_prime; prime++) 
    {
       if (soln2[prime] == -1) continue;
       
@@ -112,8 +112,7 @@
       }
    }
    
-   unsigned long prime;
-   for (prime = second_prime; prime < num_primes; prime++) 
+   for (unsigned long prime = second_prime; prime < num_primes; prime++) 
    {
       p = factor_base[prime].p;
       size = sizes[prime];
@@ -409,7 +408,6 @@
 #endif
    } else small[0] = 0;
    
-   unsigned long j;
    for (j = 2; j < small_primes; j++) // pull out small primes
    {
       prime = factor_base[j].p;
--- ./QS/mp_linear_algebra.c.orig	2010-12-23 20:45:11.000000000 -0700
+++ ./QS/mp_linear_algebra.c	2011-07-18 15:20:30.951375906 -0600
@@ -70,13 +70,11 @@
    FILE * lprels = flint_fopen("lprels","w");
    fclose(lprels);
     
-   unsigned long i;
-   for (i = 0; i < buffer_size; i++) 
+   for (unsigned long i = 0; i < buffer_size; i++) 
    {
       mpz_init2(Y_arr[i], prec);
    }
-   unsigned long i;
-   for (i = 0; i < qs_inf->num_primes + EXTRA_RELS + 1000; i++) 
+   for (unsigned long i = 0; i < qs_inf->num_primes + EXTRA_RELS + 1000; i++) 
    {
       matrix[i].weight = 0;
    }
@@ -94,20 +92,17 @@
    mpz_t * Y_arr = la_inf->Y_arr;
    const unsigned long buffer_size = 2*(qs_inf->num_primes + EXTRA_RELS + 500);
    
-   unsigned long i;
-   for (i = 0; i < buffer_size; i++) 
+   for (unsigned long i = 0; i < buffer_size; i++) 
    {
       mpz_clear(Y_arr[i]);
    }
    
-	unsigned long i;
-	for (i = 0; i < la_inf->columns; i++) // Clear all used columns
+   for (unsigned long i = 0; i < la_inf->columns; i++) // Clear all used columns
    {
 		free_col(matrix + i);
    }
    
-   unsigned long i;
-   for (i = 0; i < la_inf->num_unmerged; i++) // Clear all used columns
+   for (unsigned long i = 0; i < la_inf->num_unmerged; i++) // Clear all used columns
    {
       free_col(unmerged + i);
    }
@@ -188,8 +183,7 @@
    long dups = 0;
    int comp;
    
-   long i;
-   for (i = columns + num_unmerged - 1L; i >= dups; i--) 
+   for (long i = columns + num_unmerged - 1L; i >= dups; i--) 
    {
       if (!columns) comp = -1;
       else if (!num_unmerged) comp = 1;
@@ -230,8 +224,7 @@
    
    if (dups)
    {
-      unsigned long i;
-      for (i = 0; i < columns; i++)
+      for (unsigned long i = 0; i < columns; i++)
       {
          copy_col(matrix + i, matrix + i + dups);
       }
@@ -326,13 +319,11 @@
       
    unsigned long fac_num = 0; 
    
-   unsigned long i;
-   for (i = 0; i < small_primes; i++)
+   for (unsigned long i = 0; i < small_primes; i++)
    {
        if (small[i]) add_factor(&rel_ptr, (unsigned long) small[i], (unsigned long) i);
    }
-   unsigned long i;
-   for (i = 0; i < num_factors; i++)
+   for (unsigned long i = 0; i < num_factors; i++)
    {
        add_factor(&rel_ptr, (unsigned long) factor[i].exp, (unsigned long) factor[i].ind);
    }
@@ -376,8 +367,7 @@
    unsigned long fac_num = 0; 
    clear_col(unmerged + num_unmerged);
    
-   unsigned long i;
-   for (i = 0; i < small_primes; i++)
+   for (unsigned long i = 0; i < small_primes; i++)
    {
        if (small[i] & 1) insert_col_entry(unmerged + num_unmerged, i);
        if (small[i]) 
@@ -387,8 +377,7 @@
           fac_num++;
        }
    }
-   unsigned long i;
-   for (i = 0; i < num_factors; i++)
+   for (unsigned long i = 0; i < num_factors; i++)
    {
        if (factor[i].exp & 1) insert_col_entry(unmerged + num_unmerged, factor[i].ind);
        curr_rel[2*fac_num + 1] = factor[i].ind;
